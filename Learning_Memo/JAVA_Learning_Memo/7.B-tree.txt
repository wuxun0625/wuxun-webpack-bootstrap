B-tree又叫平衡多路查找树。一棵m阶的B-tree (m叉树)的特性如下：
	1) 树中每个结点至多有m个子节点；
	2) 除根结点和叶子结点外，其它每个结点至少有ceil(m / 2)个子节点；
	3) 若根结点不是叶子结点，则至少有2个孩子（特殊情况：没有孩子的根结点，即根结点为叶子结点，整棵树只有一个根节点）；
	4) 每个非终端结点中包含有n个关键字信息： (n，P0，K1，P1，K2，P2，......，Kn，Pn)。其中：
		a) Ki (i=1...n)为关键字，且关键字按顺序排序K(i-1)< Ki。
		b) Pi为指向子树根的接点，且指针P(i-1)指向子树种所有结点的关键字均小于Ki，但都大于K(i-1)。
		c) 关键字的个数n必须满足： ceil(m / 2)-1 <= n <= m-1。
		B-tree中的每个结点根据实际情况可以包含大量的关键字信息和分支(当然是不能超过磁盘块的大小，根据磁盘驱动(disk drives)的不同，一般块的大小在1k~4k左右)；
		这样树的深度降低了，这就意味着查找一个元素只要很少结点从外存磁盘中读入内存，很快访问到要查找的数据。

名词解释：
	1.ceil(x)是一个向上取整的函数，如ceil(3/2)=2
	2.平衡树具有以下性质：它是一棵空树或它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树。
	3.多路查找树：就是一棵树的每个节点的度小于等于m。
	              每个节点的键值数小于m
				  每个节点的度小于等于m
				  键值按顺序排列
				  子树的键值要完全小于或大于或介于父节点之间的键值 
	4.度：一个节点的子树个数称为此节点的度。

总结：
	B-tree是一个存储数据有序排列的平衡多路查找树。
	使用B-tree结构可以显著减少定位记录时所经历的中间过程，从而加快存取速度。

那数据库为什么使用这种结构？
　　一般来说，索引本身也很大，不可能全部存储在内存中，因此索引往往以索引文件的形式存储的磁盘上。
	这样的话，索引查找过程中就要产生磁盘I/O消耗，相对于内存存取，I/O存取的消耗要高几个数量级，
	所以评价一个数据结构作为索引的优劣最重要的指标就是在查找过程中磁盘I/O操作次数的渐进复杂度。
	换句话说，索引的结构组织要尽量减少查找过程中磁盘I/O的存取次数。
　　为了达到这个目的，磁盘按需读取，要求每次都会预读的长度一般为页的整数倍。
	而且数据库系统将一个节点的大小设为等于一个页，这样每个节点只需要一次I/O就可以完全载入。
	每次新建节点时，直接申请一个页的空间，这样就保证一个节点物理上也存储在一个页里，加之计算机存储分配都是按页对齐的，就实现了一个node只需一次I/O。
	并把B-tree中的m值设的非常大，就会让树的高度降低，有利于一次完全载入

B-tree的增加和删除元素操作可参考下记网址：
	http://www.2cto.com/database/201411/351106.html