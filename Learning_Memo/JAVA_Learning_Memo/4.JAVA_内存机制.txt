1.JAVA内存结构
  1.1.程序计数器：当前线程所执行的字节码的行号指示器。
           每条线程都需要有一个独立的程序计数器，各条线程之间的计数器互不影响，独立存储，我们称这类内存区域为“线程私有”的内存。
		   此内存区域是唯一一个在Java虚拟机规范中没有规定任何OutOfMemoryError情况的区域。
  1.2.栈：线程私有的，用来存储局部变量，保存基本数据类型的值，保存类的实例，即堆区对象的引用(指针)。
          变量或对象的引用生存期结束后，自动释放栈内存。
  1.3.堆：Java堆是被所有线程共享的一块内存区域，用来存放动态产生的数据，比如new出来的对象。
          堆中的对象只有当所有的实例，也即是对象的引用都失效的时候，才被标记为垃圾对象，由垃圾内存回收机制在某个时间予以回收。
  1.4.方法区：与Java堆一样，是各个线程共享的内存区域，它用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。
  1.5.常量池：运行时常量池（Runtime Constant Pool）是方法区的一部分。用于存放编译期生成的各种字面量和符号引用，这部分内容将在类加载后存放到方法区的运行时常量池中。
  1.6.代码段：用来存放从硬盘上读取的源程序代码。
  1.7.数据段：用来存放static定义的静态成员。
  
  小结：
    1.分清什么是实例什么是对象。Class a= new Class();此时a叫实例，而不能说a是对象。实例在栈中，对象在堆中，操作实例实际上是通过实例的指针间接操作对象。多个实例可以指向同一个对象。
    2.栈中的数据和堆中的数据销毁并不是同步的。方法一旦结束，栈中的局部变量立即销毁，但是堆中对象不一定销毁。
	  因为可能有其他变量也指向了这个对象，直到栈中没有变量指向堆中的对象时，它才销毁，而且还不是马上销毁，要等垃圾回收扫描时才可以被销毁。
    3.以上的栈、堆、代码段、数据段等等都是相对于应用程序而言的。每一个应用程序都对应唯一的一个JVM实例，每一个JVM实例都有自己的内存区域，互不影响。
	  并且这些内存区域是所有线程共享的。这里提到的栈和堆都是整体上的概念，这些堆栈还可以细分。
    4.类的成员变量在不同对象中各不相同，都有自己的存储空间(成员变量在堆中的对象中)。
	  而类的方法却是该类的所有对象共享的，只有一套，对象使用方法的时候方法才被压入栈，方法不使用则不占用内存。
	5.实现了常量池技术的包装类如Integer的对象，当赋值一个常量时（i=10），会将对象指向常量池中的地址，不同对象可指向同一个常量。
	  没有实现常量池技术的包装类如double的对象，即使赋值给一个常量，依然会在堆内存中创建一个新的地址，不同对象指向不同常量地址。