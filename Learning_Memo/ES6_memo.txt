1.使用let可以定义一个具有块级作用域的变量，一旦在块级作用域里使用了let声明变量，则该块级作用域会出现“临时死区”，即调用未定义的变量会报错，
  而不是像ES5一样返回undefined。
2.使用const可以定义一个具有块级作用域的常量，同样会出现“临时死区”。
  但如果该常量指向一个对象，则只是锁定了常量的内存地址（无法向该常量赋以新值），我们依然可以调用该常量修改其对应的对象中的属性。
3.变量的解构赋值。
  3.1.数组的解构赋值
	let [a, b, c] = [1, 2, 3];
  3.2.解构赋值允许指定默认值。
	let [x, y = 'b'] = ['a']; // x='a', y='b'
  3.3.对象的解构赋值
	let { foo, bar } = { foo: "aaa", bar: "bbb" };
	foo // "aaa"
	bar // "bbb"
	对象的属性没有次序，变量必须与属性同名，才能取到正确的值
  3.4.字符串的解构赋值
    const [a, b, c, d, e] = 'hello';
	a // "h"
	b // "e"
	c // "l"
	d // "l"
	e // "o"
3.字符串的扩展
  3.1.针对unicode的双字节字符的扩展
	codePointAt()
	at()
  3.2.字符串的遍历器接口 
    for (let codePoint of 'foo') {
	  console.log(codePoint)
	}
	// "f"
	// "o"
	// "o"
  3.3.模板字符串
    3.3.1.反引号（`）标识。
		old:
		var basketNum = 3;
		$('#result').append(
		'There are <b>' + basketNum + '</b> ' +
		'items in your basket' +
		);
		New：
		let basketNum = 3;
		$('#result').append(`
		There are <b>${basket}</b> items in your basket
		`);
	3.3.2.大括号内部可以放入任意的 JavaScript 表达式，可以进行运算，以及引用对象属性。
		let x = 1;
		let y = 2;
		
		`${x} + ${y} = ${x + y}`
		// "1 + 2 = 3"

		`${x} + ${y * 2} = ${x + y * 2}`
		// "1 + 4 = 5"
		
		let obj = {x: 1, y: 2};
		`${obj.x + obj.y}`
		// "3"
4.函数的扩展
  4.1.函数的参数可以设置默认值
	function log(x, y = 'World') {
	console.log(x, y);
	}
	
	log('Hello') // Hello World
	log('Hello', 'China') // Hello China
	log('Hello', '') // Hello
  4.2.箭头函数 
    var f = v => v;

	// 等同于
	var f = function (v) {
	return v;
	};
	
	如果箭头函数不需要参数或需要多个参数，就使用一个圆括号代表参数部分。
	var f = () => 5;
	// 等同于
	var f = function () { return 5 };
 
	如果箭头函数的代码块部分多于一条语句，就要使用大括号将它们括起来，并且使用return语句返回。
	var sum = (num1, num2) => { return num1 + num2; }
  
	（1）函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象。
	
	（2）不可以当作构造函数，也就是说，不可以使用new命令，否则会抛出一个错误。
	
	（3）不可以使用arguments对象，该对象在函数体内不存在。如果要用，可以用 rest 参数代替。
	
	（4）不可以使用yield命令，因此箭头函数不能用作 Generator 函数。
  
  
  
  
  
  
  
  
  
  
  
  
  