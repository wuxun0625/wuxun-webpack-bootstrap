1.执行环境(execution context)
	每一个对象，每一个函数都拥有自己的执行环境，环境中定义的所有变量和函数都保存在变量对象(variable object)中，在函数中这个变量对象又叫活动对象(Activation object)。
2.作用域
	当代码在一个执行环境中运行时，会在变量对象中创建一个作用域链，作用域链的最前端永远是当前的执行环境的变量对象(活动对象)。
	当调用变量或函数时会从作用域链的最前端检索到最后端，找不到就报undefined错误。
3.闭包。
	指有权访问另一个函数作用域中的变量的函数。
	之所以能访问闭包函数的父函数作用域正是因为闭包函数的作用域链中包含了父函数的活动对象。
	即使父函数已经销毁，父函数的作用域链也销毁，但闭包函数的作用域链中依然保留着父函数的活动对象，所以父函数的活动对象依然保存在内存中，正是如此所以闭包函数可以继续访问父函数的变量。
	闭包函数的this通常指向全局对象
4.面向对象
	4.1.工厂模式
		function createPerson(name, age, job) {
			var o = new Object();
			o.name = name;
			o.age = age;
			o.job = job;
			o.sayName = function () {
				alert(o.name);
			};
			return o;
		}
		var person = createPerson("wuxun", 33, "programer");
		缺点：无法识别对象的类型，instanceof 只能针对object返回true
	4.2.构造函数模式
		function Person(name, age, job) {
			this.name = name;
			this.age = age;
			this.job = job;
			this.sayName = function () {
				alert(this.name);
			};
		}
		var person = new Person('wuxun',33,'programer');
		优点：可以识别对象类型, person instanceof Person; //true
		缺点：构造函数创建的每一个对象中的属性都是独立存在于内存中的，如果属性是函数，会导致无谓的内存占用。
	4.3.原型模式
		我们创建的每个函数都有一个prototype属性，这个属性是一个指针，指向一个对象，这个对象的内容在所有实例中是共享的。
		function Person () {
		}
		Person.prototype.name = 'wuxun';
		Person.prototype.age = 33;
		Person.prototype.job = 'programer';
		Person.prototype.sayName = function () {
			alert(this.name);
		};
		var person = new Person();
		优点：原型中定义的属性在所有实例中共享。对于函数属性来说节省内存占用。
		缺点：原型中定义的属性在所有实例中共享。对于原生类型或者引用类型属性来说，会导致数据不必要的在所有实例中共享。
		
	4.4.组合使用构造函数模式和原型模式（最主流的创建自定义类型的方法）
		原理就是利用构造函数模式定义实例属性，利用原型模式定义需要共享的属性和函数。
		function Person (name, age, job) {
			this.name = name;
			this.age = age;
			this.job = job;
		}
		Person.prototype = {
			constructor : Person;//这个很重要，因为利用字面量完全重新定义函数的prototype属性后，改属性中的constructor就会指向object，而不是原构造函数
			sayName: function () {
				alert(this.name);
			}
		}
		var person = new Person();
	4.5.稳妥构造函数模式
		中心思想是不定义在实例中共享的属性，不引用this,不使用new.
		function Person (name, age, job){
			var o = new Object();
			var perivateVar = 'private';
			o.sayName = function() {
				//不使用sayName函数的话，Person的实例是永远无法访问name和privateVar的
				alert(name);
				alert(perivateVar);
			};
			return o;
		}
		var person = Person('wuxun',33,'programer');
5.函数的call,apply,bind方法。
	Reference: https://www.cnblogs.com/libin-1/p/5823025.html
	5.1.call
		函数实例的call方法，可以指定该函数内部this的指向（即函数执行时所在的作用域），然后在所指定的作用域中，调用该函数。并且会立即执行该函数。
		var keith = {
			rascal: 123
		};
	
		var rascal = 456;
	
		function a() {
			console.log(this.rascal);
		}
	
		a(); //456
		a.call(keith); //123
		
		call()方法可以传递两个参数。第一个参数是指定函数内部中this的指向（也就是函数执行时所在的作用域），第二个参数是函数调用时需要传递的参数。
		keith.call(null, 1, 2)
	5.2.apply
		apply方法的作用与call方法类似，也是改变this指向（函数执行时所在的作用域），然后在指定的作用域中，调用该函数。同时也会立即执行该函数。唯一的区别就是，它接收一个数组作为函数执行时的参数。
		keith.apply(null,[1,2])
	5.3.bind
		bind方法用于指定函数内部的this指向（执行时所在的作用域），然后返回一个新函数。bind方法并非立即执行一个函数。
		var keith = {
			a: 1,
			count: function() {
				console.log(this.a++);
			}
		};
	
		keith.count(); //1
		keith.count(); //2
		keith.count(); //3
		
		//此时如果不使用bind将keith作为执行环境绑定到f上，执行f()时的执行环境将是全局环境，全局环境中没有定义a，那么this.a++必然报错
		var f = keith.count.bind(keith);
		f(); //1
		f(); //2
		f(); //3
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		